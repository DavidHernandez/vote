<?php

/**
 * @file
 *  Adds the hooks for adding the Vote and VoteType entities.
 */

module_load_include('inc', 'vote', 'includes/vote.api');

/**
 * Implements hook_entity_info().
 */
function vote_entity_info() {
  $entities['vote'] = array(
    'label' => t('Vote'),
    'plural label' => t('Votes'),
    'entity class' => '\Drupal\vote\Entity\Vote\Vote',
    'controller class' => '\Drupal\vote\Entity\Vote\VoteController',
    'base table' => 'vote',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'bundle',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'vote',
  );

  foreach (vote_types() as $type => $info) {
    $entities['vote']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/votes/types/%vote_type',
        'real path' => 'admin/structure/votes/types/' . $type,
        'bundle argument' => 4,
      )
    );
  }

  $entities['vote_type'] = array(
    'label' => t('Vote type'),
    'plural label' => t('Vote types'),
    'entity class' => '\Drupal\vote\Entity\Vote\VoteType',
    'controller class' => '\Drupal\vote\Entity\Vote\VoteTypeController',
    'base table' => 'vote_type',
    'fieldable' => FALSE,
    'bundle of' => 'vote',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'vote',
    'admin ui' => array(
      'path' => 'admin/structure/vote/type/add',
      'file' => 'vote.form.inc',
      'controller class' => '\Drupal\vote\Entity\Vote\VoteTypeUIController',
    ),
  );
  return $entities;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function vote_entity_property_info_alter(&$info) {
  $properties = &$info['vote']['properties'];
  $info['voting_user'] = array(
    'label' => t('Voting user'),
    'type' => 'user',
    'description' => t('The user who voted on the entity.'),
    'schema field' => 'voting_user',
  );
  $info['voted_user'] = array(
    'label' => t('Voted user'),
    'type' => 'user',
    'description' => t('The author of the voted entity.'),
    'schema field' => 'voted_user',
  );
  $info['timestamp'] = array(
    'label' => t('Voted date'),
    'type' => 'date',
    'description' => t('The date when the vote was casted.'),
    'schema field' => 'timestamp',
  );
  $info['entity_id'] = array(
    'label' => t('Entity ID'),
    'type' => 'entity',
    'description' => t('The entity ID that has been voted.'),
    'setter callback' => 'vote_set_entity_callback',
    'getter callback' => 'vote_get_entity_callback',
  );
  $info['bundle'] = array(
    'label' => t('Bundle'),
    'type' => 'text',
    'description' => t('The type of vote.'),
    'schema field' => 'bundle',
  );
}

function vote_set_entity_callback($item, $property_name, $wrapper) {
  // TODO Review this.
  dpm($item);
}

function vote_get_entity_callback($item) {
  // TODO Review this.
  dpm($item);
}

/**
 * Implements hook_menu().
 */
function vote_menu() {
  $menu['admin/structure/vote'] = array(
    'title' => t('List all votes'),
    'access arguments' => array('admin votes'),
    'page callback' => 'vote_add_page',
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/add'] = array(
    'title' => t('Add new vote'),
    'access arguments' => array('admin votes'),
    'page callback' => 'vote_add_page',
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/add/%vote_type'] = array(
    'title' => t('Add new vote'),
    'access arguments' => array('admin votes'),
    'page callback' => 'vote_entity_add',
    'page arguments' => array(4),
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/%vote/edit'] = array(
    'title' => t('Edit vote'),
    'access arguments' => array('admin votes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_form', 3),
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/%vote/delete'] = array(
    'title' => t('Delete the vote'),
    'access arguments' => array('admin votes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_delete_form', 3),
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/type'] = array(
    'title' => t('List all vote types'),
    'access arguments' => array('admin vote types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_type_entity_form'),
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/type/add'] = array(
    'title' => t('Add new vote type'),
    'access arguments' => array('admin vote types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_type_entity_form'),
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/type/%vote_type/edit'] = array(
    'title' => t('Edit a vote type'),
    'access arguments' => array('admin vote types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_form', 3),
    'file' => 'includes/vote.form.inc',
  );
  $menu['admin/structure/vote/type/%vote_type/delete'] = array(
    'title' => t('Delete a vote type'),
    'access arguments' => array('admin vote types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vote_type_delete_form', 3),
    'file' => 'includes/vote.form.inc',
  );
  return $menu;
}

/**
 * Implements hook_permission().
 */
function vote_permission() {
  $permissions['admin vote types'] = array(
    'title' => t('Administer vote types'),
    'description' => t('Allows the user to administer the vote types.'),
  );
  $permissions['admin votes'] = array(
    'title' => t('Administer votes'),
    'description' => t('Allows the user to administer the vote entities.'),
  );
  return $permissions;
}

/**
 * Returns the list of vote types.
 */
function vote_types() {
  $q = db_select('vote_type', 'v');
  $q->fields('v');
  $types = $q->execute()->fetchAllAssoc('type');
  return array();
}
